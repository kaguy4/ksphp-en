<?xml version="1.0"?><phpdoc><class name="patTemplate" extends="" undoc="false" access="public" package="patTemplate"><file>/var/www/html/projects/pat/patTemplate/include/patTemplate.php</file><doc><author email="schst@php-tools.de">Stephan Schmidt</author><description>Features include: several templates in one file, automatic repetitions, global variables,alternating lists, conditions, and much more</description><shortdescription>Easy-to-use but powerful template engine</shortdescription><version>2.4 ($Id: patTemplate.php,v 1.54 2001/11/03 13:34:16 schst Exp $)</version></doc><function name="patTemplate" undoc="false" access="public"><doc><parameter name="$type" default="&amp;quot;html&amp;quot;" type="string">type of output you want to generate.</parameter><return type="void"/><description>Create new patTemplate objectYou can choose between two outputs you want tp generate: html (default) or tex (LaTex).When &amp;quot;tex&amp;quot; is used the patTemplate markings used for variables are changed as LaTex makes use of the default patTemplate markings.You can also change the markings later by calling setTags();</description><shortdescription>Constructor</shortdescription></doc></function><function name="setType" undoc="false" access="public"><doc><parameter name="$type" default="&amp;quot;&amp;quot;" type="string">predefined template type, like &amp;quot;html&amp;quot; or &amp;quot;tex&amp;quot;</parameter><return type="void"/><description>select a predefined template type</description><shortdescription>Set template type</shortdescription></doc></function><function name="setTags" undoc="false" access="public"><doc><parameter name="$start" default="patTEMPLATE_TAG_START," type="string">start tag</parameter><parameter name="$end" default="patTEMPLATE_TAG_END" type="string">end tag</parameter><return type="void"/><description>Sets the start and end tags of template variables</description><shortdescription>Set template tags</shortdescription></doc></function><function name="setBasedir" undoc="false" access="public"><doc><parameter name="$basedir" type="string">directory of the templates</parameter><return type="void"/><description>Sets the directory where the template are stored.By default the engine looks in the directory where the original file is stored.</description><shortdescription>Set template directory</shortdescription></doc></function><function name="exists" undoc="false" access="public"><doc><parameter name="$name" type="string">name of the template</parameter><return name="" type="bool"/><description/><shortdescription>Check if a template exists</shortdescription></doc></function><function name="addTemplate" undoc="false" access="public"><doc><see type="function">setBaseDir()</see><see type="function">addTemplates()</see><parameter name="$name" type="string">name of the template</parameter><parameter name="$filename" type="string">filename of the sourcetemplate</parameter><return type="void"/><description>Adds a plain text/html to the template engine.The file has to be in the directory that has been set using setBaseDir</description><shortdescription>Add a template</shortdescription><deprecated>2.4 2001/11/05</deprecated></doc></function><function name="addTemplates" undoc="false" access="public"><doc><see type="function">setBaseDir()</see><see type="function">addTemplate()</see><parameter name="$templates" type="array">associative Array with name/filename pairs</parameter><return type="void"/><description>Adds several templates to the template engine using an associative array.Names of the templates are stored in the keys, filenames are the values.The templates have to be in the directory set by setBaseDir().</description><shortdescription>Adds several templates</shortdescription><deprecated>2.4 2001/11/05</deprecated></doc></function><function name="createTemplate" undoc="false" access="private"><doc><parameter name="$name" type="string">name of the template</parameter><parameter name="$source" type="array">data regarding the source of the template</parameter><return type="void"/><description>creates all needed variables</description><shortdescription>creates a new template</shortdescription></doc></function><function name="setTemplateType" undoc="false" access="private"><doc><see type="function">setAttribute()</see><parameter name="$template" type="string">name of the template</parameter><parameter name="$type" type="string">type of the template</parameter><return type="void"/><description>Template types can be STANDARD, CONDITION or ODDEVENThe type of the template can also be set using setAttribute()</description><shortdescription>Sets the type of the Template</shortdescription></doc></function><function name="setConditionVar" undoc="false" access="private"><doc><see type="function">setTemplateType()</see><parameter name="$template" type="string">name of the template</parameter><parameter name="$conditionvar" type="string">name of the conditionvariable</parameter><return type="void"/><description>The type of the template has to be condition</description><shortdescription>Sets the conditionvar of a condtion Template</shortdescription></doc></function><function name="setAttribute" undoc="false" access="public"><doc><see type="function">setAttributes()</see><see type="function">getAttribute()</see><see type="function">clearAttribute()</see><parameter name="$template" type="string">name of the template</parameter><parameter name="$attribute" type="string">name of the attribute</parameter><parameter name="$value" type="mixed">value of the attribute</parameter><return type="void"/><description>supported attributes: visibilty, loop, parse, unusedvars</description><shortdescription>Sets an attribute of a template</shortdescription></doc></function><function name="setAttributes" undoc="false" access="public"><doc><see type="function">setAttribute()</see><see type="function">getAttribute()</see><see type="function">clearAttribute()</see><parameter name="$template" type="string">name of the template</parameter><parameter name="$attributes" type="array">attribute/value pairs</parameter><return type="void"/><description>$attributes has to be a assotiative arrays containing attribute/value pairssupported attributes: visibilty, loop, parse, unusedvars</description><shortdescription>Sets several attribute of a template</shortdescription></doc></function><function name="getAttribute" undoc="false" access="public"><doc><see type="function">setAttribute()</see><see type="function">setAttributes()</see><see type="function">clearAttribute()</see><parameter name="$template" type="string">name of the template</parameter><parameter name="$attribute" type="string">name of the attribute</parameter><return name="" type="mixed">value of the attribute</return><description>supported attributes: visibilty, loop, parse, unusedvars</description><shortdescription>Gets an attribute of a template</shortdescription></doc></function><function name="clearAttribute" undoc="false" access="public"><doc><see type="function">setAttribute()</see><see type="function">setAttributes()</see><see type="function">getAttribute()</see><parameter name="$template" type="string">name of the template</parameter><parameter name="$attribute" type="string">name of the attribute</parameter><return type="void"/><description>supported attributes: visibilty, loop, parse, unusedvars</description><shortdescription>Clears an attribute of a template</shortdescription></doc></function><function name="addSubTemplate" undoc="false" access="private"><doc><see type="function">setTemplateType()</see><parameter name="$template" type="string">name of the template</parameter><parameter name="$condition" type="string">condition for this subtemplate</parameter><return type="void"/><description>template type has to be condition or oddeven</description><shortdescription>Adds a subtemplate for a condition or oddeven template</shortdescription></doc></function><function name="readTemplatesFromFile" undoc="false" access="public"><doc><see type="function">setBasedir()</see><parameter name="$file" type="string">filename</parameter><return type="void"/><description>Templates can be seperated using TagsThe file has to be located in the directory that has been set using setBaseDir.</description><shortdescription>Parses several templates from one patTemplate file</shortdescription></doc></function><function name="createParser" undoc="false" access="private"><doc><parameter name="$fname" type="string">filename of the template</parameter><return type="void"/><description/><shortdescription>parse a template file and call the appropriate handlers</shortdescription></doc></function><function name="startElementHandler" undoc="false" access="private"><doc><parameter name="$fname" type="string">name of the file where the tag was found (kind of parser id)</parameter><parameter name="$tagname" type="string">name of the start tag that was found</parameter><parameter name="$attributes" type="array">all attributes that were found</parameter><parameter name="$line" type="string">the complete line containing the tag</parameter><parameter name="$lineno" type="integer">lineno in the parse file (can be used for error messages</parameter><return type="void"/><description/><shortdescription>handle a &amp;lt;patTemplate:...&amp;gt; start tag in template parser</shortdescription></doc></function><function name="endElementHandler" undoc="false" access="private"><doc><parameter name="$fname" type="string">name of the file where the tag was found (kind of parser id)</parameter><parameter name="$tagname" type="string">name of the start tag that was found</parameter><parameter name="$line" type="string">the complete line containing the tag</parameter><return type="void"/><description/><shortdescription>handle a &amp;lt;/patTemplate:...&amp;gt; end tag in template parser</shortdescription></doc></function><function name="DataHandler" undoc="false" access="private"><doc><parameter name="$fname" type="string">name of the file where the tag was found (kind of parser id)</parameter><parameter name="$data" type="string">all cdata that was found</parameter><return type="void"/><description/><shortdescription>handle a CDATA in template parser</shortdescription></doc></function><function name="addVar" undoc="false" access="public"><doc><see type="function">addVars()</see><see type="function">addRows()</see><see type="function">addGlobalVar()</see><see type="function">addGlobalVars()</see><parameter name="$template" type="string">name of the template</parameter><parameter name="$name" type="string">name of the variables</parameter><parameter name="$value" type="mixed">value of the variable</parameter><return type="void"/><description>Each Template can have an unlimited amount of its own variables</description><shortdescription>Adds a variable to a template</shortdescription></doc></function><function name="addVars" undoc="false" access="public"><doc><see type="function">addVar()</see><see type="function">addRows()</see><see type="function">addGlobalVar()</see><see type="function">addGlobalVars()</see><parameter name="$template" type="string">name of the template</parameter><parameter name="$variables" type="array">assotiative array of the variables</parameter><parameter name="$prefix" default="&amp;quot;&amp;quot;" type="string">prefix for all variable names</parameter><return type="void"/><description>Each Template can have an unlimited amount of its own variables$variables has to be an assotiative array containing variable/value pairs</description><shortdescription>Adds several variables to a template</shortdescription></doc></function><function name="addRows" undoc="false" access="public"><doc><see type="function">addVar()</see><see type="function">addVars()</see><see type="function">addGlobalVar()</see><see type="function">addGlobalVars()</see><parameter name="$template" type="string">name of the template</parameter><parameter name="$rows" type="array">array containing assotiative arrays with variable/value pairs</parameter><parameter name="$prefix" default="&amp;quot;&amp;quot;" type="string">prefix for all variable names</parameter><return type="void"/><description>Each Template can have an unlimited amount of its own variablesCan be used to add a database result as variables to a template</description><shortdescription>Adds several rows of variables to a template</shortdescription></doc></function><function name="addGlobalVar" undoc="false" access="public"><doc><see type="function">addGlobalVars()</see><see type="function">addVar()</see><see type="function">addVars()</see><see type="function">addRows()</see><parameter name="$name" type="string">name of the global variable</parameter><parameter name="$value" type="string">value of the variable</parameter><return type="void"/><description>Global variables are valid in all templates of this object</description><shortdescription>Adds a global variable</shortdescription></doc></function><function name="addGlobalVars" undoc="false" access="public"><doc><see type="function">addGlobalVar()</see><see type="function">addVar()</see><see type="function">addVars()</see><see type="function">addRows()</see><parameter name="$variables" type="array">array containing the variables</parameter><parameter name="$prefix" default="&amp;quot;&amp;quot;" type="string">prefix for variable names</parameter><return type="void"/><description>Global variables are valid in all templates of this object$variables is an assotiative array, containing name/value pairs of the variables</description><shortdescription>Adds several global variables</shortdescription></doc></function><function name="addDependency" undoc="false" access="private"><doc><parameter name="$container" type="string">the name of the template, that contains the other template</parameter><parameter name="$child" type="string">the child of the container</parameter><return type="void"/><description>The Dependency tells a template, which templates have to be parsed before parsing the current template, because they are its children.</description><shortdescription>Creates a dependeny between two templates</shortdescription></doc></function><function name="loadTemplate" undoc="false" access="private"><doc><see type="function">addTemplate()</see><see type="function">addTemplates()</see><parameter name="$name" type="string">name of the template that has to be loaded</parameter><return type="void"/><description>The template has to be defined using addTemplate() or addTemplates()</description><shortdescription>loads a template</shortdescription><deprecated>2.4 2001/11/05</deprecated></doc></function><function name="setPlainContent" undoc="false" access="private"><doc><parameter name="$template" type="string">name of the template</parameter><parameter name="$content" type="string">the content that has to be set</parameter><parameter name="$sub" default="&amp;quot;&amp;quot;" type="string">condition, for the subtemplate, if any</parameter><return type="void"/><description>This function should used, if a template is added using tags instead of defining it by a filename</description><shortdescription>sets the content of a template</shortdescription></doc></function><function name="parseTemplate" undoc="false" access="public"><doc><see type="function">parseStandardTemplate()</see><see type="function">parseIterativeTemplate()</see><parameter name="$template" type="string">name of the template</parameter><parameter name="$mode" default="&amp;quot;w&amp;quot;" type="string">mode for the parsing</parameter><return type="void"/><description>Parses a template and stores the parsed content.mode can be &amp;quot;w&amp;quot; for write (delete already parsed content) or &amp;quot;a&amp;quot; for append (appends thenew parsed content to the already parsed content)</description><shortdescription>parses a template</shortdescription></doc></function><function name="parseStandardTemplate" undoc="false" access="private"><doc><see type="function">parseTemplate()</see><see type="function">parseIterativeTemplate()</see><parameter name="$name" type="string">name of the template</parameter><parameter name="$mode" default="&amp;quot;w&amp;quot;" type="string">mode for the parsing</parameter><return type="void"/><description>Parses a template and stores the parsed content.mode can be &amp;quot;w&amp;quot; for write (delete already parsed content) or &amp;quot;a&amp;quot; for append (appends thenew parsed content to the already parsed content)</description><shortdescription>parses a standard template</shortdescription></doc></function><function name="parseIterativeTemplate" undoc="false" access="private"><doc><see type="function">parseTemplate()</see><see type="function">parseStandardTemplate()</see><parameter name="$name" type="string">name of the template</parameter><parameter name="$mode" type="string">mode for the parsing</parameter><return type="void"/><description>Parses a template and stores the parsed content.mode can be &amp;quot;w&amp;quot; for write (delete already parsed content) or &amp;quot;a&amp;quot; for append (appends thenew parsed content to the already parsed content)</description><shortdescription>parses an iterative template</shortdescription></doc></function><function name="getVars" undoc="false" access="private"><doc><parameter name="$template" type="string">name of the template</parameter><return name="$vars" type="array"> array containign vars</return><description>if the templates uses the attribute &amp;apos;varscope&amp;apos; these vars will be fetched, too</description><shortdescription>get variables for a template</shortdescription></doc></function><function name="parseGlobals" undoc="false" access="private"><doc><see type="function">parseTemplate()</see><see type="function">addGlobalVar()</see><see type="function">addGlobalVars()</see><parameter name="$name" type="string">name of the template</parameter><parameter name="&amp;$temp" type="string">content of the parsed Template</parameter><return type="void"/><description>global variables are valid in all templates</description><shortdescription>parses the global variables in a template</shortdescription></doc></function><function name="stripUnusedVars" undoc="false" access="private"><doc><see type="function">setAttribute()</see><parameter name="$name" type="string">name of the template</parameter><parameter name="&amp;$template" type="string">content of the parsed Template</parameter><return type="void"/><description>either strips, comments, replaces or ignores them, depending on the unusedvars attribute</description><shortdescription>handles unset variables</shortdescription></doc></function><function name="parseDependencies" undoc="false" access="private"><doc><see type="function">addDependency()</see><parameter name="$name" type="string">name of the template</parameter><parameter name="&amp;$temp" type="string">content of the parsed Template</parameter><parameter name="$mode" type="string" undoc="true"/><return type="void"/><description>parses child templates of a template and inserts their content</description><shortdescription>parses dependencies of a template</shortdescription></doc></function><function name="getParsedTemplate" undoc="false" access="public"><doc><see type="function">displayParsedTemplate()</see><parameter name="$name" default="&amp;quot;&amp;quot;" type="string">name of the template</parameter><return name="$content" type="string"> Content of the parsed template</return><description>If the template already has been parsed, it just returns the parsed template.If the template has not been loaded, it will be loaded.</description><shortdescription>returns a parsed Template</shortdescription></doc></function><function name="displayParsedTemplate" undoc="false" access="public"><doc><see type="function">getParsedTemplate()</see><parameter name="$name" default="&amp;quot;&amp;quot;" type="string">name of the template</parameter><return type="void"/><description>If the template has not been loaded, it will be loaded.</description><shortdescription>displays a parsed Template</shortdescription></doc></function><function name="getPlainTemplate" undoc="false" access="private"><doc><see type="function">getPlainSubTemplate()</see><see type="function">displayPlainTemplate()</see><parameter name="$name" type="string">name of the template</parameter><return name="$content" type="string"> Unparsed content of the template</return><description>If the template has not been loaded, it will be loaded.</description><shortdescription>returns an unparsed Template</shortdescription><deprecated>2.4 2001/11/05</deprecated></doc></function><function name="getPlainSubTemplate" undoc="false" access="private"><doc><see type="function">getPlainTemplate()</see><see type="function">displayPlainTemplate()</see><parameter name="$name" type="string">name of the template</parameter><parameter name="$sub" type="string">condition for the subtemplate</parameter><return name="$content" type="string"> Unparsed content of the template</return><description>The template of the template has to be set</description><shortdescription>returns an unparsed Subtemplate</shortdescription><deprecated>2.4 2001/11/05</deprecated></doc></function><function name="displayPlainTemplate" undoc="false" access="private"><doc><see type="function">getPlainTemplate()</see><see type="function">getPlainSubTemplate()</see><parameter name="$name" type="string">name of the template</parameter><return type="void"/><description>If the template has not been loaded, it will be loaded.</description><shortdescription>displays an unparsed Template</shortdescription><deprecated>2.4 2001/11/05</deprecated></doc></function><function name="clearTemplate" undoc="false" access="public"><doc><parameter name="$name" type="string">name of the template</parameter><return type="void"/><description>parsed Content, variables and the loop attribute are cleared</description><shortdescription>clears a parsed Template</shortdescription></doc></function><function name="clearAllTemplates" undoc="false" access="public"><doc><return type="void"/><description/><shortdescription>clears all templates</shortdescription></doc></function><function name="parseAttributes" undoc="false" access="private"><doc><parameter name="$string" type="string">string containing the attributes</parameter><return name="$array" type="array"> assotiative array, containing all attributes</return><description>used for parsing &amp;lt;patTemplate&amp;gt; Tags</description><shortdescription>parsed attributes from a string</shortdescription></doc></function><function name="getTemplateContent" undoc="false" access="private"><doc><parameter name="$name" type="string">name of the template</parameter><return name="$content" type="string"> plain content of the template</return><description>return value depends on iteration value</description><shortdescription>returns the plain content of a template</shortdescription></doc></function><function name="getVar" undoc="false" access="private"><doc><parameter name="$template" type="string">name of the template</parameter><return name="$value" type="mixed"> value of the variable / false if it doesn&amp;apos;t exist</return><description/><shortdescription>get the value of a variable</shortdescription></doc></function><function name="dump" undoc="false" access="public"><doc><return type="void"/><description>returns content, variables, attributes and unused variables</description><shortdescription>displays useful information about all templates</shortdescription></doc></function><constant name="patTEMPLATE_TAG_START" undoc="false" access="public" case="default: case sensitive">{<doc><description/><shortdescription>Variable prefix</shortdescription></doc></constant><constant name="patTEMPLATE_TAG_END" undoc="false" access="public" case="default: case sensitive">}<doc><description/><shortdescription>Variable sufix</shortdescription></doc></constant><constant name="patTEMPLATE_TYPE_STANDARD" undoc="false" access="private" case="default: case sensitive">STANDARD<doc><description/><shortdescription>Template type Standard</shortdescription></doc></constant><constant name="patTEMPLATE_TYPE_ODDEVEN" undoc="false" access="private" case="default: case sensitive">ODDEVEN<doc><description/><shortdescription>Template type OddEven</shortdescription></doc></constant><constant name="patTEMPLATE_TYPE_CONDITION" undoc="false" access="private" case="default: case sensitive">CONDITION<doc><description/><shortdescription>Template type Condition</shortdescription></doc></constant><constant name="patTEMPLATE_TYPE_SIMPLECONDITION" undoc="false" access="private" case="default: case sensitive">SIMPLECONDITION<doc><description/><shortdescription>Template type SimpleCondition</shortdescription></doc></constant></class></phpdoc>